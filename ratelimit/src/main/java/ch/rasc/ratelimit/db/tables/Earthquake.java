/*
 * This file is generated by jOOQ.
 */
package ch.rasc.ratelimit.db.tables;

import ch.rasc.ratelimit.db.DefaultSchema;
import ch.rasc.ratelimit.db.Keys;
import ch.rasc.ratelimit.db.tables.records.EarthquakeRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Earthquake extends TableImpl<EarthquakeRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>EARTHQUAKE</code>
   */
  public static final Earthquake EARTHQUAKE = new Earthquake();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<EarthquakeRecord> getRecordType() {
    return EarthquakeRecord.class;
  }

  /**
   * The column <code>EARTHQUAKE.ID</code>.
   */
  public final TableField<EarthquakeRecord, Long> ID = createField(DSL.name("ID"),
      SQLDataType.BIGINT.nullable(false).identity(true), this, "");

  /**
   * The column <code>EARTHQUAKE.TIME</code>.
   */
  public final TableField<EarthquakeRecord, LocalDateTime> TIME = createField(
      DSL.name("TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.LATITUDE</code>.
   */
  public final TableField<EarthquakeRecord, BigDecimal> LATITUDE = createField(
      DSL.name("LATITUDE"), SQLDataType.DECIMAL(10, 7).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.LONGITUDE</code>.
   */
  public final TableField<EarthquakeRecord, BigDecimal> LONGITUDE = createField(
      DSL.name("LONGITUDE"), SQLDataType.DECIMAL(10, 7).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.DEPTH</code>.
   */
  public final TableField<EarthquakeRecord, BigDecimal> DEPTH = createField(
      DSL.name("DEPTH"), SQLDataType.DECIMAL(6, 2).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.MAG</code>.
   */
  public final TableField<EarthquakeRecord, BigDecimal> MAG = createField(DSL.name("MAG"),
      SQLDataType.DECIMAL(4, 2).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.PLACE</code>.
   */
  public final TableField<EarthquakeRecord, String> PLACE = createField(DSL.name("PLACE"),
      SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>EARTHQUAKE.EARTHQUAKE_ID</code>.
   */
  public final TableField<EarthquakeRecord, String> EARTHQUAKE_ID = createField(
      DSL.name("EARTHQUAKE_ID"), SQLDataType.VARCHAR(18).nullable(false), this, "");

  private Earthquake(Name alias, Table<EarthquakeRecord> aliased) {
    this(alias, aliased, null);
  }

  private Earthquake(Name alias, Table<EarthquakeRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>EARTHQUAKE</code> table reference
   */
  public Earthquake(String alias) {
    this(DSL.name(alias), EARTHQUAKE);
  }

  /**
   * Create an aliased <code>EARTHQUAKE</code> table reference
   */
  public Earthquake(Name alias) {
    this(alias, EARTHQUAKE);
  }

  /**
   * Create a <code>EARTHQUAKE</code> table reference
   */
  public Earthquake() {
    this(DSL.name("EARTHQUAKE"), null);
  }

  public <O extends Record> Earthquake(Table<O> child,
      ForeignKey<O, EarthquakeRecord> key) {
    super(child, key, EARTHQUAKE);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public Identity<EarthquakeRecord, Long> getIdentity() {
    return (Identity<EarthquakeRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<EarthquakeRecord> getPrimaryKey() {
    return Keys.CONSTRAINT_9;
  }

  @Override
  public Earthquake as(String alias) {
    return new Earthquake(DSL.name(alias), this);
  }

  @Override
  public Earthquake as(Name alias) {
    return new Earthquake(alias, this);
  }

  @Override
  public Earthquake as(Table<?> alias) {
    return new Earthquake(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public Earthquake rename(String name) {
    return new Earthquake(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Earthquake rename(Name name) {
    return new Earthquake(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public Earthquake rename(Table<?> name) {
    return new Earthquake(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<Long, LocalDateTime, BigDecimal, BigDecimal, BigDecimal, BigDecimal, String, String> fieldsRow() {
    return (Row8) super.fieldsRow();
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  public <U> SelectField<U> mapping(
      Function8<? super Long, ? super LocalDateTime, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
    return convertFrom(Records.mapping(from));
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
   */
  public <U> SelectField<U> mapping(Class<U> toType,
      Function8<? super Long, ? super LocalDateTime, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
